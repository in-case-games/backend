// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Withdraw.DAL.Data;

#nullable disable

namespace Withdraw.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20231223131147_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Withdraw.DAL.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_name");

                    b.ToTable("Game", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2167273e-9b38-4832-8aad-06d4ea8034fe"),
                            Name = "csgo"
                        },
                        new
                        {
                            Id = new Guid("9e7eebcd-44d6-49f3-a5e9-5530f50dcf40"),
                            Name = "dota2"
                        });
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.GameItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<string>("IdForMarket")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_for_market");

                    b.HasKey("Id")
                        .HasName("pk_game_item");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_item_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_id");

                    b.ToTable("GameItem", (string)null);
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.GameMarket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_market");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_market_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_market_id");

                    b.HasIndex("Name")
                        .HasDatabaseName("ix_game_market_name");

                    b.ToTable("GameMarket", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("cede606e-f821-44b4-8c70-ea836cbddb1a"),
                            GameId = new Guid("2167273e-9b38-4832-8aad-06d4ea8034fe"),
                            Name = "tm"
                        },
                        new
                        {
                            Id = new Guid("8e6ce950-9744-4c92-ae4c-dad991cbf1ea"),
                            GameId = new Guid("9e7eebcd-44d6-49f3-a5e9-5530f50dcf40"),
                            Name = "tm"
                        });
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.UserHistoryWithdraw", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<decimal>("FixedCost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("fixed_cost");

                    b.Property<string>("InvoiceId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("invoice_id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uuid")
                        .HasColumnName("market_id");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uuid")
                        .HasColumnName("status_id");

                    b.Property<string>("TradeUrl")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("trade_url");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_history_withdraw");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_withdraw_id");

                    b.HasIndex("InvoiceId")
                        .HasDatabaseName("ix_user_history_withdraw_invoice_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_history_withdraw_item_id");

                    b.HasIndex("MarketId")
                        .HasDatabaseName("ix_user_history_withdraw_market_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_user_history_withdraw_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_history_withdraw_user_id");

                    b.ToTable("UserHistoryWithdraw", (string)null);
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.UserInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date");

                    b.Property<decimal>("FixedCost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("fixed_cost");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_inventory");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_inventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_inventory_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_inventory_user_id");

                    b.ToTable("UserInventory", (string)null);
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.WithdrawStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_withdraw_status");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_withdraw_status_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_withdraw_status_name");

                    b.ToTable("WithdrawStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("19c09bea-beb8-4973-967b-54f320dc6383"),
                            Name = "purchase"
                        },
                        new
                        {
                            Id = new Guid("f49cabfc-a3f2-4d9c-9180-de1291861fe0"),
                            Name = "transfer"
                        },
                        new
                        {
                            Id = new Guid("0ef9de6c-f80d-4219-94a4-0539092a9618"),
                            Name = "given"
                        },
                        new
                        {
                            Id = new Guid("ab55ab99-8658-4abf-a4e8-9211fde98007"),
                            Name = "cancel"
                        },
                        new
                        {
                            Id = new Guid("f4b2532a-6391-424f-b79d-7ae2a9f6bf70"),
                            Name = "recorded"
                        },
                        new
                        {
                            Id = new Guid("bab4e5ac-232f-4455-9774-87e9b287a7f3"),
                            Name = "blocked"
                        });
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.GameItem", b =>
                {
                    b.HasOne("Withdraw.DAL.Entities.Game", "Game")
                        .WithMany("Items")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.GameMarket", b =>
                {
                    b.HasOne("Withdraw.DAL.Entities.Game", "Game")
                        .WithOne("Market")
                        .HasForeignKey("Withdraw.DAL.Entities.GameMarket", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_market_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.UserHistoryWithdraw", b =>
                {
                    b.HasOne("Withdraw.DAL.Entities.GameItem", "Item")
                        .WithMany("HistoriesWithdraws")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdraw_game_item_item_id");

                    b.HasOne("Withdraw.DAL.Entities.GameMarket", "Market")
                        .WithMany("HistoryWithdraws")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdraw_game_market_market_id");

                    b.HasOne("Withdraw.DAL.Entities.WithdrawStatus", "Status")
                        .WithOne("HistoryWithdraw")
                        .HasForeignKey("Withdraw.DAL.Entities.UserHistoryWithdraw", "StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdraw_statuses_status_id");

                    b.HasOne("Withdraw.DAL.Entities.User", "User")
                        .WithMany("HistoriesWithdraws")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdraw_user_user_id");

                    b.Navigation("Item");

                    b.Navigation("Market");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.UserInventory", b =>
                {
                    b.HasOne("Withdraw.DAL.Entities.GameItem", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_inventory_game_item_item_id");

                    b.HasOne("Withdraw.DAL.Entities.User", "User")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_inventory_user_user_id");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.Game", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Market");
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.GameItem", b =>
                {
                    b.Navigation("HistoriesWithdraws");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.GameMarket", b =>
                {
                    b.Navigation("HistoryWithdraws");
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.User", b =>
                {
                    b.Navigation("HistoriesWithdraws");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Withdraw.DAL.Entities.WithdrawStatus", b =>
                {
                    b.Navigation("HistoryWithdraw");
                });
#pragma warning restore 612, 618
        }
    }
}
