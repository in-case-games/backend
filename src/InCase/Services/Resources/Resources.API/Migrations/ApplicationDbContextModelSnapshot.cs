// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Resources.DAL.Data;

#nullable disable

namespace Resources.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Resources.DAL.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_name");

                    b.ToTable("Game", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("0defcee8-5ded-48ae-87ed-f5cfe28f37c8"),
                            Name = "csgo"
                        },
                        new
                        {
                            Id = new Guid("18d71c14-b015-49c4-9399-5d8985c7bce7"),
                            Name = "dota2"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<string>("HashName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("hash_name");

                    b.Property<string>("IdForMarket")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("id_for_market");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("QualityId")
                        .HasColumnType("uuid")
                        .HasColumnName("quality_id");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid")
                        .HasColumnName("rarity_id");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id")
                        .HasName("pk_game_item");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_item_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_id");

                    b.HasIndex("QualityId")
                        .HasDatabaseName("ix_game_item_quality_id");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_game_item_rarity_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_game_item_type_id");

                    b.ToTable("GameItem", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_quality");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_quality_id1");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_quality_name");

                    b.ToTable("GameItemQuality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("59be9012-8676-4695-be49-08fd899aca4d"),
                            Name = "none"
                        },
                        new
                        {
                            Id = new Guid("a90845d1-0a9f-4ecd-b3e9-f8275d04dd9c"),
                            Name = "battle scarred"
                        },
                        new
                        {
                            Id = new Guid("e3c4c7cb-d693-461b-8fcd-913dd0d298a0"),
                            Name = "well worn"
                        },
                        new
                        {
                            Id = new Guid("ec3e7934-9115-499a-9592-800ae4eb226c"),
                            Name = "field tested"
                        },
                        new
                        {
                            Id = new Guid("cbc6c121-8b5d-4f67-b584-18e3ac5ecbf2"),
                            Name = "minimal wear"
                        },
                        new
                        {
                            Id = new Guid("4911c661-e184-49e3-8b89-efac038d5d79"),
                            Name = "factory new"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemRarity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_rarity");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_rarity_id1");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_rarity_name");

                    b.ToTable("GameItemRarity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b01d4fb6-52a1-4837-8d3d-ba7140243938"),
                            Name = "white"
                        },
                        new
                        {
                            Id = new Guid("a89c47a6-0c8c-4445-b6cc-b566e5792a2b"),
                            Name = "blue"
                        },
                        new
                        {
                            Id = new Guid("299ce7e0-8aed-404c-831f-184ff29af60e"),
                            Name = "violet"
                        },
                        new
                        {
                            Id = new Guid("114b181e-76e4-4a9d-84f2-8742ddf1b2aa"),
                            Name = "pink"
                        },
                        new
                        {
                            Id = new Guid("4cccf4d1-f280-4952-8e40-6834d32814d3"),
                            Name = "red"
                        },
                        new
                        {
                            Id = new Guid("f5854d12-87b0-41eb-ad6b-dab8d2d33069"),
                            Name = "gold"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_type_id1");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_type_name");

                    b.ToTable("GameItemType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b0b3cff-dcdc-42a1-ba56-b1a24dc9ffd1"),
                            Name = "none"
                        },
                        new
                        {
                            Id = new Guid("7986b45f-152f-4ef5-9887-aa30deefce7e"),
                            Name = "pistol"
                        },
                        new
                        {
                            Id = new Guid("eed2b10b-cd14-4d73-9429-a53f22d446a9"),
                            Name = "weapon"
                        },
                        new
                        {
                            Id = new Guid("b047de60-1296-431c-8d62-27074b98c6be"),
                            Name = "rifle"
                        },
                        new
                        {
                            Id = new Guid("1d9466b3-71e3-408f-9b09-9ea314b1d7d2"),
                            Name = "knife"
                        },
                        new
                        {
                            Id = new Guid("9fe35cf7-898d-4301-b595-a658c2d3228a"),
                            Name = "gloves"
                        },
                        new
                        {
                            Id = new Guid("92def963-066b-42bd-a997-2be68d397c90"),
                            Name = "other"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GroupLootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_group_loot_box");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_name");

                    b.ToTable("GroupLootBox", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_loot_box");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_name");

                    b.ToTable("LootBox", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uuid")
                        .HasColumnName("box_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_banner");

                    b.HasIndex("BoxId")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_id");

                    b.ToTable("LootBoxBanner", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uuid")
                        .HasColumnName("box_id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_group");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_group_box_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_group_game_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_loot_box_group_group_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_group_id");

                    b.ToTable("LootBoxGroup", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uuid")
                        .HasColumnName("box_id");

                    b.Property<int>("ChanceWining")
                        .HasColumnType("integer")
                        .HasColumnName("chance_wining");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_inventory");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_inventory_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_inventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_loot_box_inventory_item_id");

                    b.ToTable("LootBoxInventory", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItem", b =>
                {
                    b.HasOne("Resources.DAL.Entities.Game", "Game")
                        .WithMany("Items")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_game_game_id");

                    b.HasOne("Resources.DAL.Entities.GameItemQuality", "Quality")
                        .WithOne("Item")
                        .HasForeignKey("Resources.DAL.Entities.GameItem", "QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_game_item_qualities_quality_id");

                    b.HasOne("Resources.DAL.Entities.GameItemRarity", "Rarity")
                        .WithOne("Item")
                        .HasForeignKey("Resources.DAL.Entities.GameItem", "RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_game_item_rarities_rarity_id");

                    b.HasOne("Resources.DAL.Entities.GameItemType", "Type")
                        .WithOne("Item")
                        .HasForeignKey("Resources.DAL.Entities.GameItem", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_game_item_types_type_id");

                    b.Navigation("Game");

                    b.Navigation("Quality");

                    b.Navigation("Rarity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBox", b =>
                {
                    b.HasOne("Resources.DAL.Entities.Game", "Game")
                        .WithMany("Boxes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxBanner", b =>
                {
                    b.HasOne("Resources.DAL.Entities.LootBox", "Box")
                        .WithOne("Banner")
                        .HasForeignKey("Resources.DAL.Entities.LootBoxBanner", "BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_banner_loot_boxes_box_id");

                    b.Navigation("Box");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxGroup", b =>
                {
                    b.HasOne("Resources.DAL.Entities.LootBox", "Box")
                        .WithMany("Groups")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_loot_box_box_id");

                    b.HasOne("Resources.DAL.Entities.Game", "Game")
                        .WithMany("Groups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_game_game_id");

                    b.HasOne("Resources.DAL.Entities.GroupLootBox", "Group")
                        .WithOne("Group")
                        .HasForeignKey("Resources.DAL.Entities.LootBoxGroup", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_group_loot_box_group_id");

                    b.Navigation("Box");

                    b.Navigation("Game");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxInventory", b =>
                {
                    b.HasOne("Resources.DAL.Entities.LootBox", "Box")
                        .WithMany("Inventories")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_loot_box_box_id");

                    b.HasOne("Resources.DAL.Entities.GameItem", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_game_item_item_id");

                    b.Navigation("Box");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.Game", b =>
                {
                    b.Navigation("Boxes");

                    b.Navigation("Groups");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItem", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemQuality", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemRarity", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemType", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GroupLootBox", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBox", b =>
                {
                    b.Navigation("Banner");

                    b.Navigation("Groups");

                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
