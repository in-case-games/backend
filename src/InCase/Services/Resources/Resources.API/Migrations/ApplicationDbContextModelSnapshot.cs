// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Resources.DAL.Data;

#nullable disable

namespace Resources.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Resources.DAL.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_name");

                    b.ToTable("Game", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("76ad9e8b-067c-498c-9e51-65b76346560c"),
                            Name = "csgo"
                        },
                        new
                        {
                            Id = new Guid("18402de5-57f8-46ca-a5a3-571a9f83ee48"),
                            Name = "dota2"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<string>("HashName")
                        .HasColumnType("text")
                        .HasColumnName("hash_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("QualityId")
                        .HasColumnType("uuid")
                        .HasColumnName("quality_id");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid")
                        .HasColumnName("rarity_id");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id")
                        .HasName("pk_game_item");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_item_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_id");

                    b.HasIndex("QualityId")
                        .HasDatabaseName("ix_game_item_quality_id");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_game_item_rarity_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_game_item_type_id");

                    b.ToTable("GameItem", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_quality");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_quality_id1");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_quality_name");

                    b.ToTable("GameItemQuality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9da9936a-cb19-4a14-9ecc-1d25c237cdb4"),
                            Name = "none"
                        },
                        new
                        {
                            Id = new Guid("229620b1-3d61-47f0-bb84-1ece8803ebea"),
                            Name = "battle scarred"
                        },
                        new
                        {
                            Id = new Guid("1613f962-b112-48f4-bca2-6ca863399249"),
                            Name = "well worn"
                        },
                        new
                        {
                            Id = new Guid("c0824aec-72bb-4eb3-96b8-c724e27cf2ff"),
                            Name = "field tested"
                        },
                        new
                        {
                            Id = new Guid("0e2c25a4-5dde-4010-ab1b-6276fa33e498"),
                            Name = "minimal wear"
                        },
                        new
                        {
                            Id = new Guid("9622ad13-cf97-4456-9e07-4311886cb877"),
                            Name = "factory new"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemRarity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_rarity");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_rarity_id1");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_rarity_name");

                    b.ToTable("GameItemRarity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec9fdce7-1463-4204-9890-55b82b912419"),
                            Name = "white"
                        },
                        new
                        {
                            Id = new Guid("f762ae3c-e24f-4a24-b929-a23a4e8d6b86"),
                            Name = "blue"
                        },
                        new
                        {
                            Id = new Guid("ab36cc66-e281-4d0f-8e33-660e6429825d"),
                            Name = "violet"
                        },
                        new
                        {
                            Id = new Guid("a0343a73-5243-4b8e-a064-0545a79fcb9d"),
                            Name = "pink"
                        },
                        new
                        {
                            Id = new Guid("240020d5-b056-41c7-b216-255baa5eee8d"),
                            Name = "red"
                        },
                        new
                        {
                            Id = new Guid("eb246068-b99d-47ff-aeb2-66e679c91c6b"),
                            Name = "gold"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_type_id1");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_type_name");

                    b.ToTable("GameItemType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("9b013058-3a93-43d5-a3a5-1a7b18351498"),
                            Name = "none"
                        },
                        new
                        {
                            Id = new Guid("ce512efe-c4b9-4cb4-b6bc-6b6b9b4e5617"),
                            Name = "pistol"
                        },
                        new
                        {
                            Id = new Guid("6b160069-bd87-4c42-aff1-ee69d52082b0"),
                            Name = "weapon"
                        },
                        new
                        {
                            Id = new Guid("f92a1e42-7b73-44d9-8046-322245716a68"),
                            Name = "rifle"
                        },
                        new
                        {
                            Id = new Guid("c673e721-72cd-47f8-994f-a168893dcdd2"),
                            Name = "knife"
                        },
                        new
                        {
                            Id = new Guid("c4961b96-1867-4478-9845-41bd2af9cdae"),
                            Name = "gloves"
                        },
                        new
                        {
                            Id = new Guid("944ec046-e4f1-47d3-8274-9a844cb667ab"),
                            Name = "other"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GroupLootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_group_loot_box");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_name");

                    b.ToTable("GroupLootBox", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_loot_box");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_name");

                    b.ToTable("LootBox", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uuid")
                        .HasColumnName("box_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_banner");

                    b.HasIndex("BoxId")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_id");

                    b.ToTable("LootBoxBanner", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uuid")
                        .HasColumnName("box_id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_group");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_group_box_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_group_game_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_loot_box_group_group_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_group_id");

                    b.ToTable("LootBoxGroup", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uuid")
                        .HasColumnName("box_id");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_inventory");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_inventory_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_inventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_loot_box_inventory_item_id");

                    b.ToTable("LootBoxInventory", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItem", b =>
                {
                    b.HasOne("Resources.DAL.Entities.Game", "Game")
                        .WithMany("Items")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_game_game_id");

                    b.HasOne("Resources.DAL.Entities.GameItemQuality", "Quality")
                        .WithOne("Item")
                        .HasForeignKey("Resources.DAL.Entities.GameItem", "QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_qualities_quality_id");

                    b.HasOne("Resources.DAL.Entities.GameItemRarity", "Rarity")
                        .WithOne("Item")
                        .HasForeignKey("Resources.DAL.Entities.GameItem", "RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_rarities_rarity_id");

                    b.HasOne("Resources.DAL.Entities.GameItemType", "Type")
                        .WithOne("Item")
                        .HasForeignKey("Resources.DAL.Entities.GameItem", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_item_types_type_id");

                    b.Navigation("Game");

                    b.Navigation("Quality");

                    b.Navigation("Rarity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBox", b =>
                {
                    b.HasOne("Resources.DAL.Entities.Game", "Game")
                        .WithMany("Boxes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxBanner", b =>
                {
                    b.HasOne("Resources.DAL.Entities.LootBox", "Box")
                        .WithOne("Banner")
                        .HasForeignKey("Resources.DAL.Entities.LootBoxBanner", "BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_banner_loot_boxes_box_id");

                    b.Navigation("Box");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxGroup", b =>
                {
                    b.HasOne("Resources.DAL.Entities.LootBox", "Box")
                        .WithMany("Groups")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_loot_box_box_id");

                    b.HasOne("Resources.DAL.Entities.Game", "Game")
                        .WithMany("Groups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_game_game_id");

                    b.HasOne("Resources.DAL.Entities.GroupLootBox", "Group")
                        .WithOne("Group")
                        .HasForeignKey("Resources.DAL.Entities.LootBoxGroup", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_group_loot_box_group_id");

                    b.Navigation("Box");

                    b.Navigation("Game");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxInventory", b =>
                {
                    b.HasOne("Resources.DAL.Entities.LootBox", "Box")
                        .WithMany("Inventories")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_loot_box_box_id");

                    b.HasOne("Resources.DAL.Entities.GameItem", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_game_item_item_id");

                    b.Navigation("Box");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.Game", b =>
                {
                    b.Navigation("Boxes");

                    b.Navigation("Groups");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItem", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemQuality", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemRarity", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemType", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GroupLootBox", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBox", b =>
                {
                    b.Navigation("Banner");

                    b.Navigation("Groups");

                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
