// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Resources.DAL.Data;

#nullable disable

namespace Resources.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Resources.DAL.Entities.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_name");

                    b.ToTable("Game", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d04fbc9a-58c4-436d-abd8-26c634beb3bf"),
                            Name = "csgo"
                        },
                        new
                        {
                            Id = new Guid("e01b068c-002b-4e4e-96ab-768529d9d480"),
                            Name = "dota2"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<string>("HashName")
                        .HasColumnType("text")
                        .HasColumnName("hash_name");

                    b.Property<string>("IdForMarket")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("id_for_market");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<Guid>("QualityId")
                        .HasColumnType("uuid")
                        .HasColumnName("quality_id");

                    b.Property<Guid>("RarityId")
                        .HasColumnType("uuid")
                        .HasColumnName("rarity_id");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("update_date");

                    b.HasKey("Id")
                        .HasName("pk_game_item");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_item_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_id");

                    b.HasIndex("QualityId")
                        .HasDatabaseName("ix_game_item_quality_id");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_game_item_rarity_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_game_item_type_id");

                    b.ToTable("GameItem", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_quality");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_quality_id1");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_quality_name");

                    b.ToTable("GameItemQuality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7701d4fa-9239-4020-98e8-d9881cc4224c"),
                            Name = "none"
                        },
                        new
                        {
                            Id = new Guid("079abd4d-ef08-4a0a-8d56-4021f59555c4"),
                            Name = "battle scarred"
                        },
                        new
                        {
                            Id = new Guid("b64f5c59-1e55-433b-a8ce-5f633f615b6b"),
                            Name = "well worn"
                        },
                        new
                        {
                            Id = new Guid("6d5e25eb-b4c8-4702-8839-14c1055e7df7"),
                            Name = "field tested"
                        },
                        new
                        {
                            Id = new Guid("f711475e-bf9f-46c9-8e70-a820d5e38e68"),
                            Name = "minimal wear"
                        },
                        new
                        {
                            Id = new Guid("c1440e66-01a3-4def-8cfc-50ce4637e447"),
                            Name = "factory new"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemRarity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_rarity");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_rarity_id1");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_rarity_name");

                    b.ToTable("GameItemRarity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d5f0afc1-f517-4157-93a9-4e74c2eec708"),
                            Name = "white"
                        },
                        new
                        {
                            Id = new Guid("fc159512-3c7d-49e3-88fa-2dcdd5cc17a6"),
                            Name = "blue"
                        },
                        new
                        {
                            Id = new Guid("eb101a50-dc98-4de6-872c-a5b97da63f38"),
                            Name = "violet"
                        },
                        new
                        {
                            Id = new Guid("151aaaeb-543b-4104-85cb-01361e75856a"),
                            Name = "pink"
                        },
                        new
                        {
                            Id = new Guid("e21d482a-072a-4b05-9284-f8aa3ad01b4d"),
                            Name = "red"
                        },
                        new
                        {
                            Id = new Guid("e8209aa9-b1d6-4f11-a59e-990153d26c12"),
                            Name = "gold"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_type_id1");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_type_name");

                    b.ToTable("GameItemType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4bda7d0d-85cf-46da-8edd-d61a986022cf"),
                            Name = "none"
                        },
                        new
                        {
                            Id = new Guid("0b9ab934-43ae-455d-9b86-a92c97244744"),
                            Name = "pistol"
                        },
                        new
                        {
                            Id = new Guid("9b2cef4b-c572-49bd-a276-4a351125f9d0"),
                            Name = "weapon"
                        },
                        new
                        {
                            Id = new Guid("c88d90a7-8785-4adb-aae7-c5122ecf12fe"),
                            Name = "rifle"
                        },
                        new
                        {
                            Id = new Guid("6857ec87-7b45-48ef-ac09-3434cf09bc26"),
                            Name = "knife"
                        },
                        new
                        {
                            Id = new Guid("b04145ae-b2b2-4b00-b20f-2136c14d4919"),
                            Name = "gloves"
                        },
                        new
                        {
                            Id = new Guid("4f31ae71-4599-47de-a266-536bf3c9dca6"),
                            Name = "other"
                        });
                });

            modelBuilder.Entity("Resources.DAL.Entities.GroupLootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_group_loot_box");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_name");

                    b.ToTable("GroupLootBox", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("boolean")
                        .HasColumnName("is_locked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_loot_box");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_name");

                    b.ToTable("LootBox", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uuid")
                        .HasColumnName("box_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_banner");

                    b.HasIndex("BoxId")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_id");

                    b.ToTable("LootBoxBanner", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uuid")
                        .HasColumnName("box_id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uuid")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_group");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_group_box_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_group_game_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_loot_box_group_group_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_group_id");

                    b.ToTable("LootBoxGroup", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uuid")
                        .HasColumnName("box_id");

                    b.Property<int>("ChanceWining")
                        .HasColumnType("integer")
                        .HasColumnName("chance_wining");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uuid")
                        .HasColumnName("item_id");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_inventory");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_inventory_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_inventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_loot_box_inventory_item_id");

                    b.ToTable("LootBoxInventory", (string)null);
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItem", b =>
                {
                    b.HasOne("Resources.DAL.Entities.Game", "Game")
                        .WithMany("Items")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_game_game_id");

                    b.HasOne("Resources.DAL.Entities.GameItemQuality", "Quality")
                        .WithOne("Item")
                        .HasForeignKey("Resources.DAL.Entities.GameItem", "QualityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_qualities_quality_id");

                    b.HasOne("Resources.DAL.Entities.GameItemRarity", "Rarity")
                        .WithOne("Item")
                        .HasForeignKey("Resources.DAL.Entities.GameItem", "RarityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_rarities_rarity_id");

                    b.HasOne("Resources.DAL.Entities.GameItemType", "Type")
                        .WithOne("Item")
                        .HasForeignKey("Resources.DAL.Entities.GameItem", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_item_types_type_id");

                    b.Navigation("Game");

                    b.Navigation("Quality");

                    b.Navigation("Rarity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBox", b =>
                {
                    b.HasOne("Resources.DAL.Entities.Game", "Game")
                        .WithMany("Boxes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxBanner", b =>
                {
                    b.HasOne("Resources.DAL.Entities.LootBox", "Box")
                        .WithOne("Banner")
                        .HasForeignKey("Resources.DAL.Entities.LootBoxBanner", "BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_banner_loot_boxes_box_id");

                    b.Navigation("Box");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxGroup", b =>
                {
                    b.HasOne("Resources.DAL.Entities.LootBox", "Box")
                        .WithMany("Groups")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_loot_box_box_id");

                    b.HasOne("Resources.DAL.Entities.Game", "Game")
                        .WithMany("Groups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_game_game_id");

                    b.HasOne("Resources.DAL.Entities.GroupLootBox", "Group")
                        .WithOne("Group")
                        .HasForeignKey("Resources.DAL.Entities.LootBoxGroup", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_group_loot_box_group_id");

                    b.Navigation("Box");

                    b.Navigation("Game");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBoxInventory", b =>
                {
                    b.HasOne("Resources.DAL.Entities.LootBox", "Box")
                        .WithMany("Inventories")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_loot_box_box_id");

                    b.HasOne("Resources.DAL.Entities.GameItem", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_game_item_item_id");

                    b.Navigation("Box");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.Game", b =>
                {
                    b.Navigation("Boxes");

                    b.Navigation("Groups");

                    b.Navigation("Items");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItem", b =>
                {
                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemQuality", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemRarity", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GameItemType", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("Resources.DAL.Entities.GroupLootBox", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("Resources.DAL.Entities.LootBox", b =>
                {
                    b.Navigation("Banner");

                    b.Navigation("Groups");

                    b.Navigation("Inventories");
                });
#pragma warning restore 612, 618
        }
    }
}
