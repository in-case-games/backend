// <auto-generated />
using System;
using Authentication.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Authentication.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Authentication.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_salt");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_user_login");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Authentication.DAL.Entities.UserAdditionalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_date");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("boolean")
                        .HasColumnName("is_confirmed");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_additional_info");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_additional_info_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_additional_info_role_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_additional_info_user_id");

                    b.ToTable("UserAdditionalInfo", (string)null);
                });

            modelBuilder.Entity("Authentication.DAL.Entities.UserRestriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_restriction");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_restriction_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_restriction_user_id");

                    b.ToTable("UserRestriction", (string)null);
                });

            modelBuilder.Entity("Authentication.DAL.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_name");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("dba56c87-19fc-4c9f-92a1-77e9cb086e10"),
                            Name = "user"
                        },
                        new
                        {
                            Id = new Guid("0eab92ff-28cf-43aa-94b6-ccf531e60041"),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("a217b81f-9078-45f9-98b5-f2a1d82fbc1d"),
                            Name = "owner"
                        },
                        new
                        {
                            Id = new Guid("82695d93-9d02-459c-b262-39e343ea107e"),
                            Name = "bot"
                        });
                });

            modelBuilder.Entity("Authentication.DAL.Entities.UserAdditionalInfo", b =>
                {
                    b.HasOne("Authentication.DAL.Entities.UserRole", "Role")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("Authentication.DAL.Entities.UserAdditionalInfo", "RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_additional_info_roles_role_id");

                    b.HasOne("Authentication.DAL.Entities.User", "User")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("Authentication.DAL.Entities.UserAdditionalInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_additional_info_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Authentication.DAL.Entities.UserRestriction", b =>
                {
                    b.HasOne("Authentication.DAL.Entities.User", "User")
                        .WithOne("Restriction")
                        .HasForeignKey("Authentication.DAL.Entities.UserRestriction", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_restriction_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Authentication.DAL.Entities.User", b =>
                {
                    b.Navigation("AdditionalInfo");

                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("Authentication.DAL.Entities.UserRole", b =>
                {
                    b.Navigation("AdditionalInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
