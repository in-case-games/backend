// <auto-generated />
using System;
using Identity.DAL.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Identity.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Identity.DAL.Entities.RestrictionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_restriction_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_restriction_type_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_restriction_type_name");

                    b.ToTable("RestrictionType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("5e5ce500-238c-4ef1-9d14-ca49362a7192"),
                            Name = "mute"
                        },
                        new
                        {
                            Id = new Guid("902a10b7-767d-4709-b4aa-8d40ff71104a"),
                            Name = "ban"
                        },
                        new
                        {
                            Id = new Guid("d72b8ed8-eafa-44b5-9804-b3d3ad5b44b0"),
                            Name = "warn"
                        });
                });

            modelBuilder.Entity("Identity.DAL.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("login");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_user_login");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Identity.DAL.Entities.UserAdditionalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("deletion_date");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("image_uri");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_additional_info");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_additional_info_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_additional_info_role_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_additional_info_user_id");

                    b.ToTable("UserAdditionalInfo", (string)null);
                });

            modelBuilder.Entity("Identity.DAL.Entities.UserRestriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("character varying(120)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("expiration_date");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uuid")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid")
                        .HasColumnName("type_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_restriction");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_restriction_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_user_restriction_owner_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_user_restriction_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_restriction_user_id");

                    b.ToTable("UserRestriction", (string)null);
                });

            modelBuilder.Entity("Identity.DAL.Entities.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_name");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a4c7537d-fd82-43b7-9ebe-a9c13fad8347"),
                            Name = "user"
                        },
                        new
                        {
                            Id = new Guid("1683f486-6f43-4956-bdcf-5d71339ef054"),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("900a3e0c-7c61-4042-8dff-3085dad06e9f"),
                            Name = "owner"
                        },
                        new
                        {
                            Id = new Guid("6d524965-fc21-4784-a0e1-f211b20740c5"),
                            Name = "bot"
                        });
                });

            modelBuilder.Entity("Identity.DAL.Entities.UserAdditionalInfo", b =>
                {
                    b.HasOne("Identity.DAL.Entities.UserRole", "Role")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("Identity.DAL.Entities.UserAdditionalInfo", "RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_additional_info_roles_role_id");

                    b.HasOne("Identity.DAL.Entities.User", "User")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("Identity.DAL.Entities.UserAdditionalInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_additional_info_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.DAL.Entities.UserRestriction", b =>
                {
                    b.HasOne("Identity.DAL.Entities.User", "Owner")
                        .WithMany("OwnerRestrictions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("fk_user_restriction_user_owner_id");

                    b.HasOne("Identity.DAL.Entities.RestrictionType", "Type")
                        .WithOne("Restriction")
                        .HasForeignKey("Identity.DAL.Entities.UserRestriction", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_restriction_restriction_type_type_id");

                    b.HasOne("Identity.DAL.Entities.User", "User")
                        .WithMany("Restrictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_restriction_user_user_id");

                    b.Navigation("Owner");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Identity.DAL.Entities.RestrictionType", b =>
                {
                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("Identity.DAL.Entities.User", b =>
                {
                    b.Navigation("AdditionalInfo");

                    b.Navigation("OwnerRestrictions");

                    b.Navigation("Restrictions");
                });

            modelBuilder.Entity("Identity.DAL.Entities.UserRole", b =>
                {
                    b.Navigation("AdditionalInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
