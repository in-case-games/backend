// <auto-generated />
using System;
using InCase.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InCase.Resources.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230329095443_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InCase.Domain.Entities.Resources.AnswerImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("answer_id");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_answer_image");

                    b.HasIndex("AnswerId")
                        .HasDatabaseName("ix_answer_image_answer_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_answer_image_id");

                    b.ToTable("AnswerImage", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<string>("IdForPlatform")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("id_for_platform");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<Guid?>("QualityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("quality_id");

                    b.Property<Guid?>("RarityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rarity_id");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_game_item");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_item_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_id");

                    b.HasIndex("QualityId")
                        .HasDatabaseName("ix_game_item_quality_id");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_game_item_rarity_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_game_item_type_id");

                    b.ToTable("GameItem", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_quality");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_quality_id");

                    b.ToTable("GameItemQuality", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemRarity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_rarity");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_rarity_id");

                    b.ToTable("GameItemRarity", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_type_id");

                    b.ToTable("GameItemType", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GamePlatform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("DomainUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("domain_uri");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_game_platform");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_platform_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_platform_id");

                    b.ToTable("GamePlatform", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GroupLootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_group_loot_box");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("GroupLootBox", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("balance");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("is_locked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.Property<decimal>("VirtualBalance")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("virtual_balance");

                    b.HasKey("Id")
                        .HasName("pk_loot_box");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_id");

                    b.ToTable("LootBox", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("box_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_banner");

                    b.HasIndex("BoxId")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_id");

                    b.ToTable("LootBoxBanner", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("box_id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_group");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_group_box_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_group_game_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_loot_box_group_group_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_group_id");

                    b.ToTable("LootBoxGroup", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("box_id");

                    b.Property<int>("ChanceWining")
                        .HasColumnType("int")
                        .HasColumnName("chance_wining");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<int>("NumberItems")
                        .HasColumnType("int")
                        .HasColumnName("number_items");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_inventory");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_inventory_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_inventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_loot_box_inventory_item_id");

                    b.ToTable("LootBoxInventory", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_news");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_news_id");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.NewsImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("news_id");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_news_image");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_news_image_id");

                    b.HasIndex("NewsId")
                        .HasDatabaseName("ix_news_image_news_id");

                    b.ToTable("NewsImage", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Promocode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("discount");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<int>("NumberActivations")
                        .HasColumnType("int")
                        .HasColumnName("number_activations");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_promocode");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_promocode_type_id");

                    b.ToTable("Promocode", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.PromocodeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_promocode_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_type_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_type_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("PromocodeType", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.RestrictionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_restriction_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_restriction_type_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_restriction_type_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("RestrictionType", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.ReviewImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("review_id");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_review_image");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_review_image_id");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("ix_review_image_review_id");

                    b.ToTable("ReviewImage", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SiteStatitics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("OpenCases")
                        .HasColumnType("int")
                        .HasColumnName("open_cases");

                    b.Property<int>("Reviews")
                        .HasColumnType("int")
                        .HasColumnName("reviews");

                    b.Property<int>("Users")
                        .HasColumnType("int")
                        .HasColumnName("users");

                    b.Property<int>("WithdrawnFunds")
                        .HasColumnType("int")
                        .HasColumnName("withdrawn_funds");

                    b.Property<int>("WithdrawnItems")
                        .HasColumnType("int")
                        .HasColumnName("withdrawn_items");

                    b.HasKey("Id")
                        .HasName("pk_site_statitics");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_site_statitics_id");

                    b.ToTable("SiteStatitics", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SiteStatiticsAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("BalanceWithdrawn")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("balance_withdrawn");

                    b.Property<decimal>("SentSites")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("sent_sites");

                    b.Property<decimal>("TotalReplenished")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("total_replenished");

                    b.HasKey("Id")
                        .HasName("pk_site_statitics_admin");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_site_statitics_admin_id");

                    b.ToTable("SiteStatiticsAdmin", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit")
                        .HasColumnName("is_closed");

                    b.Property<Guid?>("SupportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("support_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_support_topic");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_support_topic_id");

                    b.HasIndex("SupportId")
                        .HasDatabaseName("ix_support_topic_support_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_support_topic_user_id");

                    b.ToTable("SupportTopic", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopicAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid?>("PlaintiffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("plaintiff_id");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("topic_id");

                    b.HasKey("Id")
                        .HasName("pk_support_topic_answer");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_support_topic_answer_id");

                    b.HasIndex("PlaintiffId")
                        .HasDatabaseName("ix_support_topic_answer_plaintiff_id");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_support_topic_answer_topic_id");

                    b.ToTable("SupportTopicAnswer", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("password_salt");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email")
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_user_login")
                        .HasFilter("[login] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserAdditionalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("balance");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool>("IsGuestMode")
                        .HasColumnType("bit")
                        .HasColumnName("is_guest_mode");

                    b.Property<bool>("IsNotifyEmail")
                        .HasColumnType("bit")
                        .HasColumnName("is_notify_email");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_additional_info");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_additional_info_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_additional_info_role_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_additional_info_user_id");

                    b.ToTable("UserAdditionalInfo", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryOpening", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("box_id");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_history_opening");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_user_history_opening_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_opening_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_history_opening_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_history_opening_user_id");

                    b.ToTable("UserHistoryOpening", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_history_payment");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_payment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_history_payment_user_id");

                    b.ToTable("UserHistoryPayment", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPromocode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasColumnName("is_activated");

                    b.Property<Guid>("PromocodeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("promocode_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_history_promocode");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_promocode_id");

                    b.HasIndex("PromocodeId")
                        .HasDatabaseName("ix_user_history_promocode_promocode_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_history_promocode_user_id");

                    b.ToTable("UserHistoryPromocode", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryWithdrawn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_history_withdrawn");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_withdrawn_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_history_withdrawn_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_history_withdrawn_user_id");

                    b.ToTable("UserHistoryWithdrawn", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<decimal>("FixedCost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("fixed_cost");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_inventory");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_inventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_inventory_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_inventory_user_id");

                    b.ToTable("UserInventory", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserPathBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("banner_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<int>("NumberSteps")
                        .HasColumnType("int")
                        .HasColumnName("number_steps");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_path_banner");

                    b.HasIndex("BannerId")
                        .HasDatabaseName("ix_user_path_banner_banner_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_path_banner_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_path_banner_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_path_banner_user_id");

                    b.ToTable("UserPathBanner", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRestriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_restriction");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_restriction_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_user_restriction_owner_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_user_restriction_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_restriction_user_id");

                    b.ToTable("UserRestriction", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_review");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_review_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_review_user_id");

                    b.ToTable("UserReview", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("device");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ip_address");

                    b.Property<string>("Refresh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refresh");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_token");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_token_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_token_user_id");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.AnswerImage", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.SupportTopicAnswer", "Answer")
                        .WithMany("Images")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_image_support_topic_answers_answer_id");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItem", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Items")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_game_game_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItemQuality", "Quality")
                        .WithOne("Item")
                        .HasForeignKey("InCase.Domain.Entities.Resources.GameItem", "QualityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_game_item_game_item_qualities_quality_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItemRarity", "Rarity")
                        .WithOne("Item")
                        .HasForeignKey("InCase.Domain.Entities.Resources.GameItem", "RarityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_game_item_game_item_rarities_rarity_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItemType", "Type")
                        .WithOne("Item")
                        .HasForeignKey("InCase.Domain.Entities.Resources.GameItem", "TypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_game_item_game_item_types_type_id");

                    b.Navigation("Game");

                    b.Navigation("Quality");

                    b.Navigation("Rarity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GamePlatform", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Platforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_platform_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBox", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Boxes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxBanner", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithOne("Banner")
                        .HasForeignKey("InCase.Domain.Entities.Resources.LootBoxBanner", "BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_banner_loot_boxes_box_id");

                    b.Navigation("Box");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxGroup", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithMany("Groups")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_loot_box_box_id");

                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Groups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_game_game_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GroupLootBox", "Group")
                        .WithOne("Group")
                        .HasForeignKey("InCase.Domain.Entities.Resources.LootBoxGroup", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_group_loot_box_group_id");

                    b.Navigation("Box");

                    b.Navigation("Game");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxInventory", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithMany("Inventories")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_loot_box_box_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_game_item_item_id");

                    b.Navigation("Box");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.NewsImage", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.News", "News")
                        .WithMany("Images")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_image_news_news_id");

                    b.Navigation("News");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Promocode", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.PromocodeType", "Type")
                        .WithOne("Promocode")
                        .HasForeignKey("InCase.Domain.Entities.Resources.Promocode", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_promocode_promocode_types_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.ReviewImage", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.UserReview", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_review_image_user_reviews_review_id");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopic", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "Support")
                        .WithMany("SupportTopics")
                        .HasForeignKey("SupportId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_support_topic_users_support_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("UserTopics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_support_topic_users_user_id");

                    b.Navigation("Support");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopicAnswer", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "Plaintiff")
                        .WithMany("Answers")
                        .HasForeignKey("PlaintiffId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_support_topic_answer_users_plaintiff_id");

                    b.HasOne("InCase.Domain.Entities.Resources.SupportTopic", "Topic")
                        .WithMany("Answers")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_support_topic_answer_support_topics_topic_id");

                    b.Navigation("Plaintiff");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserAdditionalInfo", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.UserRole", "Role")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserAdditionalInfo", "RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_additional_info_user_roles_role_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserAdditionalInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_additional_info_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryOpening", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithMany("HistoryOpenings")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_opening_loot_box_box_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("HistoryOpenings")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_opening_game_item_item_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryOpenings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_opening_user_user_id");

                    b.Navigation("Box");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPayment", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_payment_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPromocode", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Promocode", "Promocode")
                        .WithMany("History")
                        .HasForeignKey("PromocodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_promocode_promocode_promocode_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryPromocodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_promocode_user_user_id");

                    b.Navigation("Promocode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryWithdrawn", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("HistoryWithdrawns")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdrawn_game_item_item_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryWithdrawns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdrawn_user_user_id");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserInventory", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("UserInventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_inventory_game_item_item_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_inventory_user_user_id");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserPathBanner", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBoxBanner", "Banner")
                        .WithMany("Paths")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_path_banner_loot_box_banner_banner_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("PathBanners")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_path_banner_game_item_item_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Paths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_path_banner_user_user_id");

                    b.Navigation("Banner");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRestriction", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "Owner")
                        .WithMany("OwnerRestrictions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_restriction_user_owner_id");

                    b.HasOne("InCase.Domain.Entities.Resources.RestrictionType", "Type")
                        .WithOne("Restriction")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserRestriction", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_restriction_restriction_type_type_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Restrictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_restriction_user_user_id");

                    b.Navigation("Owner");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserReview", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_review_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserToken", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_token_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Game", b =>
                {
                    b.Navigation("Boxes");

                    b.Navigation("Groups");

                    b.Navigation("Items");

                    b.Navigation("Platforms");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItem", b =>
                {
                    b.Navigation("HistoryOpenings");

                    b.Navigation("HistoryWithdrawns");

                    b.Navigation("Inventories");

                    b.Navigation("PathBanners");

                    b.Navigation("UserInventories");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemQuality", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemRarity", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemType", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GroupLootBox", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBox", b =>
                {
                    b.Navigation("Banner");

                    b.Navigation("Groups");

                    b.Navigation("HistoryOpenings");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxBanner", b =>
                {
                    b.Navigation("Paths");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.News", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Promocode", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.PromocodeType", b =>
                {
                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.RestrictionType", b =>
                {
                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopic", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopicAnswer", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.User", b =>
                {
                    b.Navigation("AdditionalInfo");

                    b.Navigation("Answers");

                    b.Navigation("HistoryOpenings");

                    b.Navigation("HistoryPayments");

                    b.Navigation("HistoryPromocodes");

                    b.Navigation("HistoryWithdrawns");

                    b.Navigation("Inventories");

                    b.Navigation("OwnerRestrictions");

                    b.Navigation("Paths");

                    b.Navigation("Restrictions");

                    b.Navigation("Reviews");

                    b.Navigation("SupportTopics");

                    b.Navigation("Tokens");

                    b.Navigation("UserTopics");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserReview", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRole", b =>
                {
                    b.Navigation("AdditionalInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
