// <auto-generated />
using System;
using InCase.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InCase.Resources.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230421043241_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InCase.Domain.Entities.Resources.AnswerImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("answer_id");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_uri");

                    b.HasKey("Id")
                        .HasName("pk_answer_image");

                    b.HasIndex("AnswerId")
                        .HasDatabaseName("ix_answer_image_answer_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_answer_image_id");

                    b.ToTable("AnswerImage", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_name");

                    b.ToTable("Game", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("69e22808-c6ba-4530-98bc-fb92bcf83ec0"),
                            Name = "csgo"
                        },
                        new
                        {
                            Id = new Guid("390e1653-0a9c-415a-8bd0-6a2e52141be9"),
                            Name = "dota"
                        },
                        new
                        {
                            Id = new Guid("fda3e97b-fc18-4eba-80a2-346213aad5c7"),
                            Name = "genshin"
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<string>("IdForMarket")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("id_for_market");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_uri");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<Guid?>("QualityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("quality_id");

                    b.Property<Guid?>("RarityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rarity_id");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_game_item");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_item_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_id");

                    b.HasIndex("QualityId")
                        .HasDatabaseName("ix_game_item_quality_id");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_game_item_rarity_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_game_item_type_id");

                    b.ToTable("GameItem", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_quality");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_quality_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_quality_name");

                    b.ToTable("GameItemQuality", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1254bfbf-cf0e-4c67-a74b-02bb262d9dc7"),
                            Name = "none"
                        },
                        new
                        {
                            Id = new Guid("0b059a8c-ac32-4f92-b173-52e890d31160"),
                            Name = "battle scarred"
                        },
                        new
                        {
                            Id = new Guid("5ca192ea-bbf1-4a5e-9b7a-fdfdac0a850b"),
                            Name = "well worn"
                        },
                        new
                        {
                            Id = new Guid("5f02b62d-23cd-40bd-b6d2-08721030da28"),
                            Name = "field tested"
                        },
                        new
                        {
                            Id = new Guid("f01bbf49-48cd-45f6-af37-ab65c1cf7852"),
                            Name = "minimal wear"
                        },
                        new
                        {
                            Id = new Guid("ad263df5-200c-436a-863a-cb8aeeac497a"),
                            Name = "factory new"
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemRarity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_rarity");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_rarity_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_rarity_name");

                    b.ToTable("GameItemRarity", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("433218bb-3bbd-4836-95c2-344db17b323e"),
                            Name = "white"
                        },
                        new
                        {
                            Id = new Guid("6472cc45-a990-4ace-9f19-98ee4b34fdaf"),
                            Name = "blue"
                        },
                        new
                        {
                            Id = new Guid("becf65e0-c8fd-4efe-80af-a18624a0f7c6"),
                            Name = "violet"
                        },
                        new
                        {
                            Id = new Guid("a566b2f9-3d3e-492c-a076-93ded98e7646"),
                            Name = "pink"
                        },
                        new
                        {
                            Id = new Guid("72870815-8b33-41c8-8578-a170f60d715c"),
                            Name = "red"
                        },
                        new
                        {
                            Id = new Guid("4c720abc-fdf3-4861-9a5c-8df27fb449c8"),
                            Name = "gold"
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_item_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_type_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_item_type_name");

                    b.ToTable("GameItemType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("2c36fff7-1298-4a59-a3c2-78fafcf6274c"),
                            Name = "none"
                        },
                        new
                        {
                            Id = new Guid("6bdaeb35-9092-40ec-a436-5a5e86af9e34"),
                            Name = "pistol"
                        },
                        new
                        {
                            Id = new Guid("68401c2d-1a9f-4057-ab68-7ae34a43c112"),
                            Name = "weapon"
                        },
                        new
                        {
                            Id = new Guid("e93872af-66b4-4af0-aa96-407146e27e3b"),
                            Name = "rifle"
                        },
                        new
                        {
                            Id = new Guid("f4dc83ac-3d8a-4bfe-b295-1af85ef4ddf9"),
                            Name = "knife"
                        },
                        new
                        {
                            Id = new Guid("68206df3-f67f-4210-8fd9-f7c6afdb2d93"),
                            Name = "gloves"
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameMarket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game_market");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_game_market_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_market_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_market_name");

                    b.ToTable("GameMarket", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GroupLootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_group_loot_box");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_group_loot_box_name");

                    b.ToTable("GroupLootBox", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.ItemWithdrawStatus", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_item_withdraw_status");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_item_withdraw_status_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_item_withdraw_status_name");

                    b.ToTable("ItemWithdrawStatus", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("1bd2aa6f-8fff-41de-9fed-18e3560b5ced"),
                            Name = "purchase"
                        },
                        new
                        {
                            Id = new Guid("2b7fa978-f333-4a41-85a3-cf3495011098"),
                            Name = "waiting"
                        },
                        new
                        {
                            Id = new Guid("9ee840c6-6714-4ef8-bb8c-230947e7fe65"),
                            Name = "transfer"
                        },
                        new
                        {
                            Id = new Guid("32abf4c0-b718-458f-9667-aea4bf408ef9"),
                            Name = "given"
                        },
                        new
                        {
                            Id = new Guid("e5d01d54-2c41-460b-9882-84bacb092ce1"),
                            Name = "cancel"
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("balance");

                    b.Property<decimal>("Cost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_uri");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("is_locked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<decimal>("VirtualBalance")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("virtual_balance");

                    b.HasKey("Id")
                        .HasName("pk_loot_box");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_game_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_id");

                    b.ToTable("LootBox", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("box_id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_uri");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_banner");

                    b.HasIndex("BoxId")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_banner_id");

                    b.ToTable("LootBoxBanner", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("box_id");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("game_id");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("group_id");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_group");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_group_box_id");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_loot_box_group_game_id");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_loot_box_group_group_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_group_id");

                    b.ToTable("LootBoxGroup", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("box_id");

                    b.Property<int>("ChanceWining")
                        .HasColumnType("int")
                        .HasColumnName("chance_wining");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.HasKey("Id")
                        .HasName("pk_loot_box_inventory");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_loot_box_inventory_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_loot_box_inventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_loot_box_inventory_item_id");

                    b.ToTable("LootBoxInventory", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.HasKey("Id")
                        .HasName("pk_news");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_news_id");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.NewsImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_uri");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("news_id");

                    b.HasKey("Id")
                        .HasName("pk_news_image");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_news_image_id");

                    b.HasIndex("NewsId")
                        .HasDatabaseName("ix_news_image_news_id");

                    b.ToTable("NewsImage", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Promocode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Discount")
                        .HasColumnType("DECIMAL(5,5)")
                        .HasColumnName("discount");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.Property<int>("NumberActivations")
                        .HasColumnType("int")
                        .HasColumnName("number_activations");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type_id");

                    b.HasKey("Id")
                        .HasName("pk_promocode");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_name");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_promocode_type_id");

                    b.ToTable("Promocode", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.PromocodeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_promocode_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_type_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_type_name");

                    b.ToTable("PromocodeType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6b8b8674-95e1-473c-b3e0-44ccbc95275a"),
                            Name = "balance"
                        },
                        new
                        {
                            Id = new Guid("804980f6-b4e0-4716-b30a-c2cd3bbe47aa"),
                            Name = "case"
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.RestrictionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_restriction_type");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_restriction_type_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_restriction_type_name");

                    b.ToTable("RestrictionType", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("b3e05824-1ba6-4c99-a0d7-b7b33bd4676c"),
                            Name = "mute"
                        },
                        new
                        {
                            Id = new Guid("b3bc880b-a543-453a-81e1-e27ea5877311"),
                            Name = "ban"
                        },
                        new
                        {
                            Id = new Guid("73a82805-2033-4f2f-a6cb-2a661b1ebd73"),
                            Name = "warn"
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.ReviewImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_uri");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("review_id");

                    b.HasKey("Id")
                        .HasName("pk_review_image");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_review_image_id");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("ix_review_image_review_id");

                    b.ToTable("ReviewImage", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SiteStatistics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("LootBoxes")
                        .HasColumnType("int")
                        .HasColumnName("loot_boxes");

                    b.Property<int>("Reviews")
                        .HasColumnType("int")
                        .HasColumnName("reviews");

                    b.Property<int>("Users")
                        .HasColumnType("int")
                        .HasColumnName("users");

                    b.Property<int>("WithdrawnFunds")
                        .HasColumnType("int")
                        .HasColumnName("withdrawn_funds");

                    b.Property<int>("WithdrawnItems")
                        .HasColumnType("int")
                        .HasColumnName("withdrawn_items");

                    b.HasKey("Id")
                        .HasName("pk_site_statistics");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_site_statistics_id");

                    b.ToTable("SiteStatistics", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("36ab535c-4876-419e-a446-29ef2ef935c1"),
                            LootBoxes = 0,
                            Reviews = 0,
                            Users = 0,
                            WithdrawnFunds = 0,
                            WithdrawnItems = 0
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SiteStatisticsAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("BalanceWithdrawn")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("balance_withdrawn");

                    b.Property<decimal>("SentSites")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("sent_sites");

                    b.Property<decimal>("TotalReplenished")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("total_replenished");

                    b.HasKey("Id")
                        .HasName("pk_site_statistics_admin");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_site_statistics_admin_id");

                    b.ToTable("SiteStatisticsAdmin", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6078ddd3-8a15-465f-a809-ddac31b2b608"),
                            BalanceWithdrawn = 0m,
                            SentSites = 0m,
                            TotalReplenished = 0m
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit")
                        .HasColumnName("is_closed");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_support_topic");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_support_topic_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_support_topic_user_id");

                    b.ToTable("SupportTopic", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopicAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid?>("PlaintiffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("plaintiff_id");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("topic_id");

                    b.HasKey("Id")
                        .HasName("pk_support_topic_answer");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_support_topic_answer_id");

                    b.HasIndex("PlaintiffId")
                        .HasDatabaseName("ix_support_topic_answer_plaintiff_id");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_support_topic_answer_topic_id");

                    b.ToTable("SupportTopicAnswer", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("password_hash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("password_salt");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_user_login");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserAdditionalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("balance");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<DateTime?>("DeletionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("deletion_date");

                    b.Property<string>("ImageUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image_uri");

                    b.Property<bool>("IsConfirmed")
                        .HasColumnType("bit")
                        .HasColumnName("is_confirmed");

                    b.Property<bool>("IsGuestMode")
                        .HasColumnType("bit")
                        .HasColumnName("is_guest_mode");

                    b.Property<bool>("IsNotifyEmail")
                        .HasColumnType("bit")
                        .HasColumnName("is_notify_email");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("role_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_additional_info");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_additional_info_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_additional_info_role_id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_user_additional_info_user_id");

                    b.ToTable("UserAdditionalInfo", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryOpening", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("box_id");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_history_opening");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_user_history_opening_box_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_opening_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_history_opening_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_history_opening_user_id");

                    b.ToTable("UserHistoryOpening", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_history_payment");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_payment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_history_payment_user_id");

                    b.ToTable("UserHistoryPayment", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPromocode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasColumnName("is_activated");

                    b.Property<Guid>("PromocodeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("promocode_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_history_promocode");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_promocode_id");

                    b.HasIndex("PromocodeId")
                        .HasDatabaseName("ix_user_history_promocode_promocode_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_history_promocode_user_id");

                    b.ToTable("UserHistoryPromocode", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryWithdraw", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<decimal>("FixedCost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("fixed_cost");

                    b.Property<int>("IdForMarket")
                        .HasColumnType("int")
                        .HasColumnName("id_for_market");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<Guid>("MarketId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("market_id");

                    b.Property<Guid>("StatusId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("status_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_history_withdraw");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_withdraw_id");

                    b.HasIndex("IdForMarket")
                        .IsUnique()
                        .HasDatabaseName("ix_user_history_withdraw_id_for_market");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_history_withdraw_item_id");

                    b.HasIndex("MarketId")
                        .HasDatabaseName("ix_user_history_withdraw_market_id");

                    b.HasIndex("StatusId")
                        .HasDatabaseName("ix_user_history_withdraw_status_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_history_withdraw_user_id");

                    b.ToTable("UserHistoryWithdraw", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<decimal>("FixedCost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("fixed_cost");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_inventory");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_inventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_inventory_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_inventory_user_id");

                    b.ToTable("UserInventory", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserPathBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("banner_id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<decimal>("FixedCost")
                        .HasColumnType("DECIMAL(18,5)")
                        .HasColumnName("fixed_cost");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("item_id");

                    b.Property<int>("NumberSteps")
                        .HasColumnType("int")
                        .HasColumnName("number_steps");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_path_banner");

                    b.HasIndex("BannerId")
                        .HasDatabaseName("ix_user_path_banner_banner_id");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_path_banner_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_user_path_banner_item_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_path_banner_user_id");

                    b.ToTable("UserPathBanner", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRestriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creation_date");

                    b.Property<string>("Description")
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expiration_date");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("owner_id");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("type_id");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_restriction");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_restriction_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_user_restriction_owner_id");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_user_restriction_type_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_restriction_user_id");

                    b.ToTable("UserRestriction", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)")
                        .HasColumnName("content");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("is_approved");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("user_id");

                    b.HasKey("Id")
                        .HasName("pk_user_review");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_review_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_user_review_user_id");

                    b.ToTable("UserReview", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_user_role");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_user_role_name");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21c9c2b2-26a1-489a-92db-7fc79af503b4"),
                            Name = "user"
                        },
                        new
                        {
                            Id = new Guid("49c82087-7e05-40ad-b1c0-6c61d6b686f0"),
                            Name = "admin"
                        },
                        new
                        {
                            Id = new Guid("6ea7f11e-d4b1-4d5c-9213-a6a056afe381"),
                            Name = "owner"
                        },
                        new
                        {
                            Id = new Guid("370f6cad-62f1-4ce5-999a-d2aad6b142ab"),
                            Name = "bot"
                        });
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.AnswerImage", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.SupportTopicAnswer", "Answer")
                        .WithMany("Images")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_answer_image_support_topic_answers_answer_id");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItem", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Items")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_item_game_game_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItemQuality", "Quality")
                        .WithOne("Item")
                        .HasForeignKey("InCase.Domain.Entities.Resources.GameItem", "QualityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_game_item_game_item_qualities_quality_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItemRarity", "Rarity")
                        .WithOne("Item")
                        .HasForeignKey("InCase.Domain.Entities.Resources.GameItem", "RarityId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_game_item_game_item_rarities_rarity_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItemType", "Type")
                        .WithOne("Item")
                        .HasForeignKey("InCase.Domain.Entities.Resources.GameItem", "TypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_game_item_game_item_types_type_id");

                    b.Navigation("Game");

                    b.Navigation("Quality");

                    b.Navigation("Rarity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameMarket", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Markets")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_game_market_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBox", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Boxes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_game_game_id");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxBanner", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithOne("Banner")
                        .HasForeignKey("InCase.Domain.Entities.Resources.LootBoxBanner", "BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_banner_loot_boxes_box_id");

                    b.Navigation("Box");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxGroup", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithMany("Groups")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_loot_box_box_id");

                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Groups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_game_game_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GroupLootBox", "Group")
                        .WithOne("Group")
                        .HasForeignKey("InCase.Domain.Entities.Resources.LootBoxGroup", "GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_group_group_loot_box_group_id");

                    b.Navigation("Box");

                    b.Navigation("Game");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxInventory", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithMany("Inventories")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_loot_box_box_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_loot_box_inventory_game_item_item_id");

                    b.Navigation("Box");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.NewsImage", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.News", "News")
                        .WithMany("Images")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_news_image_news_news_id");

                    b.Navigation("News");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Promocode", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.PromocodeType", "Type")
                        .WithOne("Promocode")
                        .HasForeignKey("InCase.Domain.Entities.Resources.Promocode", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_promocode_promocode_types_type_id");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.ReviewImage", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.UserReview", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_review_image_user_reviews_review_id");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopic", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Topics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_support_topic_users_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopicAnswer", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "Plaintiff")
                        .WithMany("Answers")
                        .HasForeignKey("PlaintiffId")
                        .HasConstraintName("fk_support_topic_answer_users_plaintiff_id");

                    b.HasOne("InCase.Domain.Entities.Resources.SupportTopic", "Topic")
                        .WithMany("Answers")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_support_topic_answer_support_topics_topic_id");

                    b.Navigation("Plaintiff");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserAdditionalInfo", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.UserRole", "Role")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserAdditionalInfo", "RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_additional_info_user_roles_role_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserAdditionalInfo", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_additional_info_users_user_id");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryOpening", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithMany("HistoryOpenings")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_opening_loot_box_box_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("HistoryOpenings")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_opening_game_item_item_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryOpenings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_opening_user_user_id");

                    b.Navigation("Box");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPayment", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_payment_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPromocode", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Promocode", "Promocode")
                        .WithMany("History")
                        .HasForeignKey("PromocodeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_promocode_promocode_promocode_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryPromocodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_promocode_user_user_id");

                    b.Navigation("Promocode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryWithdraw", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("HistoryWithdraws")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdraw_game_item_item_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameMarket", "Market")
                        .WithMany("HistoryWithdraws")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdraw_game_market_market_id");

                    b.HasOne("InCase.Domain.Entities.Resources.ItemWithdrawStatus", "Status")
                        .WithOne("HistoryWithdraw")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserHistoryWithdraw", "StatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdraw_item_withdraw_status_status_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryWithdraws")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_history_withdraw_user_user_id");

                    b.Navigation("Item");

                    b.Navigation("Market");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserInventory", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("UserInventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_inventory_game_item_item_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_inventory_user_user_id");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserPathBanner", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBoxBanner", "Banner")
                        .WithMany("Paths")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_path_banner_loot_box_banner_banner_id");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("PathBanners")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_path_banner_game_item_item_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Paths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_path_banner_user_user_id");

                    b.Navigation("Banner");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRestriction", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "Owner")
                        .WithMany("OwnerRestrictions")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("fk_user_restriction_user_owner_id");

                    b.HasOne("InCase.Domain.Entities.Resources.RestrictionType", "Type")
                        .WithOne("Restriction")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserRestriction", "TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_restriction_restriction_type_type_id");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Restrictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_restriction_user_user_id");

                    b.Navigation("Owner");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserReview", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_review_user_user_id");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Game", b =>
                {
                    b.Navigation("Boxes");

                    b.Navigation("Groups");

                    b.Navigation("Items");

                    b.Navigation("Markets");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItem", b =>
                {
                    b.Navigation("HistoryOpenings");

                    b.Navigation("HistoryWithdraws");

                    b.Navigation("Inventories");

                    b.Navigation("PathBanners");

                    b.Navigation("UserInventories");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemQuality", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemRarity", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemType", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameMarket", b =>
                {
                    b.Navigation("HistoryWithdraws");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GroupLootBox", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.ItemWithdrawStatus", b =>
                {
                    b.Navigation("HistoryWithdraw");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBox", b =>
                {
                    b.Navigation("Banner");

                    b.Navigation("Groups");

                    b.Navigation("HistoryOpenings");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxBanner", b =>
                {
                    b.Navigation("Paths");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.News", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Promocode", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.PromocodeType", b =>
                {
                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.RestrictionType", b =>
                {
                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopic", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopicAnswer", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.User", b =>
                {
                    b.Navigation("AdditionalInfo");

                    b.Navigation("Answers");

                    b.Navigation("HistoryOpenings");

                    b.Navigation("HistoryPayments");

                    b.Navigation("HistoryPromocodes");

                    b.Navigation("HistoryWithdraws");

                    b.Navigation("Inventories");

                    b.Navigation("OwnerRestrictions");

                    b.Navigation("Paths");

                    b.Navigation("Restrictions");

                    b.Navigation("Reviews");

                    b.Navigation("Topics");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserReview", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRole", b =>
                {
                    b.Navigation("AdditionalInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
