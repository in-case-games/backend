// <auto-generated />
using System;
using InCase.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InCase.Resources.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("InCase.Domain.Entities.Resources.AnswerImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("AnswerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("answerid");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_answerimage");

                    b.HasIndex("AnswerId")
                        .HasDatabaseName("ix_answerimage_answerid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_answerimage_id");

                    b.ToTable("AnswerImage", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Game", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_game");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_game_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_game_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("Game", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gameid");

                    b.Property<string>("IdForPlatform")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("idforplatform");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<Guid?>("QualityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("qualityid");

                    b.Property<Guid?>("RarityId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("rarityid");

                    b.Property<Guid?>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("typeid");

                    b.HasKey("Id")
                        .HasName("pk_gameitem");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_gameitem_gameid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_gameitem_id");

                    b.HasIndex("QualityId")
                        .HasDatabaseName("ix_gameitem_qualityid");

                    b.HasIndex("RarityId")
                        .HasDatabaseName("ix_gameitem_rarityid");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_gameitem_typeid");

                    b.ToTable("GameItem", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemQuality", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gameitemquality");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_gameitemquality_id");

                    b.ToTable("GameItemQuality", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemRarity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gameitemrarity");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_gameitemrarity_id");

                    b.ToTable("GameItemRarity", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_gameitemtype");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_gameitemtype_id");

                    b.ToTable("GameItemType", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GamePlatform", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("DomainUri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("domainuri");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gameid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_gameplatform");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_gameplatform_gameid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_gameplatform_id");

                    b.ToTable("GamePlatform", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GroupLootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_grouplootbox");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_grouplootbox_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_grouplootbox_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("GroupLootBox", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBox", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("cost");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gameid");

                    b.Property<bool>("IsLocked")
                        .HasColumnType("bit")
                        .HasColumnName("islocked");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.Property<decimal>("VirtualBalance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("virtualbalance");

                    b.HasKey("Id")
                        .HasName("pk_lootbox");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_lootbox_gameid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_lootbox_id");

                    b.ToTable("LootBox", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("boxid");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creationdate");

                    b.Property<DateTime?>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expirationdate");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("isactive");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_lootboxbanner");

                    b.HasIndex("BoxId")
                        .IsUnique()
                        .HasDatabaseName("ix_lootboxbanner_boxid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_lootboxbanner_id");

                    b.ToTable("LootBoxBanner", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("boxid");

                    b.Property<Guid>("GameId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("gameid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("groupid");

                    b.HasKey("Id")
                        .HasName("pk_lootboxgroup");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_lootboxgroup_boxid");

                    b.HasIndex("GameId")
                        .HasDatabaseName("ix_lootboxgroup_gameid");

                    b.HasIndex("GroupId")
                        .HasDatabaseName("ix_lootboxgroup_groupid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_lootboxgroup_id");

                    b.ToTable("LootBoxGroup", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("boxid");

                    b.Property<int>("ChanceWining")
                        .HasColumnType("int")
                        .HasColumnName("chancewining");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("itemid");

                    b.Property<int>("NumberItems")
                        .HasColumnType("int")
                        .HasColumnName("numberitems");

                    b.HasKey("Id")
                        .HasName("pk_lootboxinventory");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_lootboxinventory_boxid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_lootboxinventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_lootboxinventory_itemid");

                    b.ToTable("LootBoxInventory", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.News", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_news");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_news_id");

                    b.ToTable("News", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.NewsImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("NewsId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("newsid");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_newsimage");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_newsimage_id");

                    b.HasIndex("NewsId")
                        .HasDatabaseName("ix_newsimage_newsid");

                    b.ToTable("NewsImage", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Promocode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("discount");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expirationdate");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.Property<int>("NumberActivations")
                        .HasColumnType("int")
                        .HasColumnName("numberactivations");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("typeid");

                    b.HasKey("Id")
                        .HasName("pk_promocode");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_promocode_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_promocode_typeid");

                    b.ToTable("Promocode", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.PromocodeType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_promocodetype");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_promocodetype_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_promocodetype_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("PromocodeType", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.RestrictionType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_restrictiontype");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_restrictiontype_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_restrictiontype_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("RestrictionType", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.ReviewImage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("ReviewId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("reviewid");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("uri");

                    b.HasKey("Id")
                        .HasName("pk_reviewimage");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_reviewimage_id");

                    b.HasIndex("ReviewId")
                        .HasDatabaseName("ix_reviewimage_reviewid");

                    b.ToTable("ReviewImage", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SiteStatitics", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<int>("OpenCases")
                        .HasColumnType("int")
                        .HasColumnName("opencases");

                    b.Property<int>("Reviews")
                        .HasColumnType("int")
                        .HasColumnName("reviews");

                    b.Property<int>("Users")
                        .HasColumnType("int")
                        .HasColumnName("users");

                    b.Property<int>("WithdrawnFunds")
                        .HasColumnType("int")
                        .HasColumnName("withdrawnfunds");

                    b.Property<int>("WithdrawnItems")
                        .HasColumnType("int")
                        .HasColumnName("withdrawnitems");

                    b.HasKey("Id")
                        .HasName("pk_sitestatitics");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_sitestatitics_id");

                    b.ToTable("SiteStatitics", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SiteStatiticsAdmin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("BalanceWithdrawn")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balancewithdrawn");

                    b.Property<decimal>("SentSites")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("sentsites");

                    b.Property<decimal>("TotalReplenished")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("totalreplenished");

                    b.HasKey("Id")
                        .HasName("pk_sitestatiticsadmin");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_sitestatiticsadmin_id");

                    b.ToTable("SiteStatiticsAdmin", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("bit")
                        .HasColumnName("isclosed");

                    b.Property<Guid?>("SupportId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("supportid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_supporttopic");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_supporttopic_id");

                    b.HasIndex("SupportId")
                        .HasDatabaseName("ix_supporttopic_supportid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_supporttopic_userid");

                    b.ToTable("SupportTopic", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopicAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid?>("PlaintiffId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("plaintiffid");

                    b.Property<Guid>("TopicId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("topicid");

                    b.HasKey("Id")
                        .HasName("pk_supporttopicanswer");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_supporttopicanswer_id");

                    b.HasIndex("PlaintiffId")
                        .HasDatabaseName("ix_supporttopicanswer_plaintiffid");

                    b.HasIndex("TopicId")
                        .HasDatabaseName("ix_supporttopicanswer_topicid");

                    b.ToTable("SupportTopicAnswer", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("email");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("login");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("passwordhash");

                    b.Property<string>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("passwordsalt");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("Email")
                        .IsUnique()
                        .HasDatabaseName("ix_user_email")
                        .HasFilter("[email] IS NOT NULL");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_user_id");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("ix_user_login")
                        .HasFilter("[login] IS NOT NULL");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserAdditionalInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("balance");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("image");

                    b.Property<bool>("IsGuestMode")
                        .HasColumnType("bit")
                        .HasColumnName("isguestmode");

                    b.Property<bool>("IsNotifyEmail")
                        .HasColumnType("bit")
                        .HasColumnName("isnotifyemail");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("roleid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_useradditionalinfo");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_useradditionalinfo_id");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_useradditionalinfo_roleid");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("ix_useradditionalinfo_userid");

                    b.ToTable("UserAdditionalInfo", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryOpening", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BoxId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("boxid");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("itemid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userhistoryopening");

                    b.HasIndex("BoxId")
                        .HasDatabaseName("ix_userhistoryopening_boxid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_userhistoryopening_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_userhistoryopening_itemid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userhistoryopening_userid");

                    b.ToTable("UserHistoryOpening", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPayment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("amount");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userhistorypayment");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_userhistorypayment_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userhistorypayment_userid");

                    b.ToTable("UserHistoryPayment", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPromocode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit")
                        .HasColumnName("isactivated");

                    b.Property<Guid>("PromocodeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("promocodeid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userhistorypromocode");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_userhistorypromocode_id");

                    b.HasIndex("PromocodeId")
                        .HasDatabaseName("ix_userhistorypromocode_promocodeid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userhistorypromocode_userid");

                    b.ToTable("UserHistoryPromocode", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryWithdrawn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("itemid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userhistorywithdrawn");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_userhistorywithdrawn_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_userhistorywithdrawn_itemid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userhistorywithdrawn_userid");

                    b.ToTable("UserHistoryWithdrawn", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserInventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<decimal>("FixedCost")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("fixedcost");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("itemid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userinventory");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_userinventory_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_userinventory_itemid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userinventory_userid");

                    b.ToTable("UserInventory", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserPathBanner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<Guid>("BannerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("bannerid");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2")
                        .HasColumnName("date");

                    b.Property<Guid>("ItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("itemid");

                    b.Property<int>("NumberSteps")
                        .HasColumnType("int")
                        .HasColumnName("numbersteps");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userpathbanner");

                    b.HasIndex("BannerId")
                        .HasDatabaseName("ix_userpathbanner_bannerid");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_userpathbanner_id");

                    b.HasIndex("ItemId")
                        .HasDatabaseName("ix_userpathbanner_itemid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userpathbanner_userid");

                    b.ToTable("UserPathBanner", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRestriction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("creationdate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("description");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("expirationdate");

                    b.Property<Guid?>("OwnerId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("ownerid");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("typeid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userrestriction");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_userrestriction_id");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("ix_userrestriction_ownerid");

                    b.HasIndex("TypeId")
                        .HasDatabaseName("ix_userrestriction_typeid");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userrestriction_userid");

                    b.ToTable("UserRestriction", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserReview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("content");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit")
                        .HasColumnName("isapproved");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("title");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_userreview");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_userreview_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_userreview_userid");

                    b.ToTable("UserReview", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_userrole");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_userrole_id");

                    b.HasIndex("Name")
                        .IsUnique()
                        .HasDatabaseName("ix_userrole_name")
                        .HasFilter("[name] IS NOT NULL");

                    b.ToTable("UserRole", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("id");

                    b.Property<string>("Device")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("device");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("email");

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ipaddress");

                    b.Property<string>("Refresh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("refresh");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("userid");

                    b.HasKey("Id")
                        .HasName("pk_usertoken");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("ix_usertoken_id");

                    b.HasIndex("UserId")
                        .HasDatabaseName("ix_usertoken_userid");

                    b.ToTable("UserToken", (string)null);
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.AnswerImage", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.SupportTopicAnswer", "Answer")
                        .WithMany("Images")
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_answerimage_supporttopicanswers_answerid");

                    b.Navigation("Answer");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItem", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Items")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_gameitem_game_gameid");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItemQuality", "Quality")
                        .WithOne("Item")
                        .HasForeignKey("InCase.Domain.Entities.Resources.GameItem", "QualityId")
                        .HasConstraintName("fk_gameitem_gameitemqualities_qualityid");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItemRarity", "Rarity")
                        .WithOne("Item")
                        .HasForeignKey("InCase.Domain.Entities.Resources.GameItem", "RarityId")
                        .HasConstraintName("fk_gameitem_gameitemrarities_rarityid");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItemType", "Type")
                        .WithOne("Item")
                        .HasForeignKey("InCase.Domain.Entities.Resources.GameItem", "TypeId")
                        .HasConstraintName("fk_gameitem_gameitemtypes_typeid");

                    b.Navigation("Game");

                    b.Navigation("Quality");

                    b.Navigation("Rarity");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GamePlatform", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Platforms")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_gameplatform_game_gameid");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBox", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Boxes")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_lootbox_game_gameid");

                    b.Navigation("Game");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxBanner", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithOne("Banner")
                        .HasForeignKey("InCase.Domain.Entities.Resources.LootBoxBanner", "BoxId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_lootboxbanner_lootbox_boxid");

                    b.Navigation("Box");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxGroup", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithMany("Groups")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_lootboxgroup_lootbox_boxid");

                    b.HasOne("InCase.Domain.Entities.Resources.Game", "Game")
                        .WithMany("Groups")
                        .HasForeignKey("GameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_lootboxgroup_game_gameid");

                    b.HasOne("InCase.Domain.Entities.Resources.GroupLootBox", "Group")
                        .WithOne("Group")
                        .HasForeignKey("InCase.Domain.Entities.Resources.LootBoxGroup", "GroupId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_lootboxgroup_grouplootbox_groupid");

                    b.Navigation("Box");

                    b.Navigation("Game");

                    b.Navigation("Group");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxInventory", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithMany("Inventories")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_lootboxinventory_lootbox_boxid");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("Inventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_lootboxinventory_gameitem_itemid");

                    b.Navigation("Box");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.NewsImage", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.News", "News")
                        .WithMany("Images")
                        .HasForeignKey("NewsId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_newsimage_news_newsid");

                    b.Navigation("News");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Promocode", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.PromocodeType", "Type")
                        .WithOne("Promocode")
                        .HasForeignKey("InCase.Domain.Entities.Resources.Promocode", "TypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_promocode_promocodetypes_typeid");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.ReviewImage", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.UserReview", "Review")
                        .WithMany("Images")
                        .HasForeignKey("ReviewId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_reviewimage_userreviews_reviewid");

                    b.Navigation("Review");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopic", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "Support")
                        .WithMany("SupportTopics")
                        .HasForeignKey("SupportId")
                        .HasConstraintName("fk_supporttopic_users_supportid");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("UserTopics")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_supporttopic_users_userid");

                    b.Navigation("Support");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopicAnswer", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "Plaintiff")
                        .WithMany("Answers")
                        .HasForeignKey("PlaintiffId")
                        .HasConstraintName("fk_supporttopicanswer_users_plaintiffid");

                    b.HasOne("InCase.Domain.Entities.Resources.SupportTopic", "Topic")
                        .WithMany("Answers")
                        .HasForeignKey("TopicId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_supporttopicanswer_supporttopic_topicid");

                    b.Navigation("Plaintiff");

                    b.Navigation("Topic");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserAdditionalInfo", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.UserRole", "Role")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserAdditionalInfo", "RoleId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("fk_useradditionalinfo_userroles_roleid");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithOne("AdditionalInfo")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserAdditionalInfo", "UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_useradditionalinfo_user_userid");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryOpening", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBox", "Box")
                        .WithMany("HistoryOpenings")
                        .HasForeignKey("BoxId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userhistoryopening_lootbox_boxid");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("HistoryOpenings")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userhistoryopening_gameitem_itemid");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryOpenings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userhistoryopening_user_userid");

                    b.Navigation("Box");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPayment", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryPayments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userhistorypayment_user_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryPromocode", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.Promocode", "Promocode")
                        .WithMany("History")
                        .HasForeignKey("PromocodeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userhistorypromocode_promocode_promocodeid");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryPromocodes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userhistorypromocode_user_userid");

                    b.Navigation("Promocode");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserHistoryWithdrawn", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("HistoryWithdrawns")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userhistorywithdrawn_gameitem_itemid");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("HistoryWithdrawns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userhistorywithdrawn_user_userid");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserInventory", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("UserInventories")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userinventory_gameitem_itemid");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Inventories")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userinventory_user_userid");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserPathBanner", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.LootBoxBanner", "Banner")
                        .WithMany("Paths")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userpathbanner_lootboxbanner_bannerid");

                    b.HasOne("InCase.Domain.Entities.Resources.GameItem", "Item")
                        .WithMany("PathBanners")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userpathbanner_gameitem_itemid");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Paths")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userpathbanner_user_userid");

                    b.Navigation("Banner");

                    b.Navigation("Item");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRestriction", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "Owner")
                        .WithMany("OwnerRestrictions")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("fk_userrestriction_user_ownerid");

                    b.HasOne("InCase.Domain.Entities.Resources.RestrictionType", "Type")
                        .WithOne("Restriction")
                        .HasForeignKey("InCase.Domain.Entities.Resources.UserRestriction", "TypeId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userrestriction_restrictiontype_typeid");

                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Restrictions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired()
                        .HasConstraintName("fk_userrestriction_user_userid");

                    b.Navigation("Owner");

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserReview", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_userreview_user_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserToken", b =>
                {
                    b.HasOne("InCase.Domain.Entities.Resources.User", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_usertoken_user_userid");

                    b.Navigation("User");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Game", b =>
                {
                    b.Navigation("Boxes");

                    b.Navigation("Groups");

                    b.Navigation("Items");

                    b.Navigation("Platforms");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItem", b =>
                {
                    b.Navigation("HistoryOpenings");

                    b.Navigation("HistoryWithdrawns");

                    b.Navigation("Inventories");

                    b.Navigation("PathBanners");

                    b.Navigation("UserInventories");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemQuality", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemRarity", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GameItemType", b =>
                {
                    b.Navigation("Item");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.GroupLootBox", b =>
                {
                    b.Navigation("Group");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBox", b =>
                {
                    b.Navigation("Banner");

                    b.Navigation("Groups");

                    b.Navigation("HistoryOpenings");

                    b.Navigation("Inventories");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.LootBoxBanner", b =>
                {
                    b.Navigation("Paths");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.News", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.Promocode", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.PromocodeType", b =>
                {
                    b.Navigation("Promocode");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.RestrictionType", b =>
                {
                    b.Navigation("Restriction");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopic", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.SupportTopicAnswer", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.User", b =>
                {
                    b.Navigation("AdditionalInfo");

                    b.Navigation("Answers");

                    b.Navigation("HistoryOpenings");

                    b.Navigation("HistoryPayments");

                    b.Navigation("HistoryPromocodes");

                    b.Navigation("HistoryWithdrawns");

                    b.Navigation("Inventories");

                    b.Navigation("OwnerRestrictions");

                    b.Navigation("Paths");

                    b.Navigation("Restrictions");

                    b.Navigation("Reviews");

                    b.Navigation("SupportTopics");

                    b.Navigation("Tokens");

                    b.Navigation("UserTopics");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserReview", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("InCase.Domain.Entities.Resources.UserRole", b =>
                {
                    b.Navigation("AdditionalInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
